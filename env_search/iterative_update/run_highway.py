import os
import gin
import fire
import json
import multiprocessing
import numpy as np
import shutil

from itertools import repeat
from logdir import LogDir
from env_search.warehouse.config import WarehouseConfig
from env_search.warehouse.module import single_simulation
from env_search.utils import single_sim_done


def run_highway_single(
    # logdir: LogDir,
    results_dir,
    domain_config,
    map_filepath,
    domain,
    seed,
    simulation_algo,
):
    gin.parse_config_file(domain_config)

    # Read in map
    with open(map_filepath, "r") as f:
        raw_env_json = json.load(f)
    num_agents = raw_env_json["piu_n_agent"]

    if domain == "kiva":
        config = WarehouseConfig()
        throughput = single_simulation(
            config,
            json.dumps(raw_env_json),
            seed,
            num_agents,
            results_dir,
            simulation_algo,
        )

    return throughput


def run_highway(
    logdir_path: str,
    domain_config,
    n_evals,
    n_workers,
    domain,
    simulation_algo,
):
    """Run each individual highway generated by `gen_highway` script

    Args:
        logdir_path (str): path to logdir of highways generated
        domain_config (str): path to the algo config
        n_evals (int): number of simulations to run for each highway
        n_workers (int): number of workers
        domain (str): domain of the simulation
    """
    logdir = LogDir("run_highway", custom_dir=logdir_path)
    all_map_filepaths = []
    maps_dir = logdir.dir("maps")
    for map_file in os.listdir(maps_dir):
        all_map_filepaths.extend([os.path.join(maps_dir, map_file)] * n_evals)

    n_maps = len(list(os.listdir(maps_dir)))
    pool = multiprocessing.Pool(n_workers)
    seeds = np.arange(n_evals)
    results_dir = logdir.dir("results", touch=True)

    # Always check for finished runs
    all_seeds = np.tile(seeds, n_maps)
    maps_to_run = []
    seeds_to_run = []
    for map_filepath, seed in zip(all_map_filepaths, all_seeds):
        with open(map_filepath, "r") as f:
            raw_env_json = json.load(f)
        num_agents = raw_env_json["piu_n_agent"]
        sim_dir_full = os.path.join(results_dir,
                                    f"sim-agent_num={num_agents}-seed={seed}")
        if not single_sim_done(sim_dir_full):
            if os.path.isdir(sim_dir_full):
                shutil.rmtree(sim_dir_full)
            maps_to_run.append(map_filepath)
            seeds_to_run.append(seed)

    assert len(maps_to_run) == len(seeds_to_run)
    n_simulations = len(maps_to_run)
    if n_simulations > 0:
        pool.starmap(
            run_highway_single,
            zip(
                # repeat(logdir, n_simulations),
                repeat(results_dir, n_simulations),
                repeat(domain_config, n_simulations),
                maps_to_run,
                repeat(domain, n_simulations),
                seeds_to_run,
                repeat(simulation_algo, n_simulations),
            ),
        )
    else:
        print("All simulations are done")


if __name__ == "__main__":
    fire.Fire(run_highway)
